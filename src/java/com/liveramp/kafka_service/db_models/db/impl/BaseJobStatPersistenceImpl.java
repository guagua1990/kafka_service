
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.kafka_service.db_models.db.impl;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.queries.where_operators.IWhereOperator;
import com.rapleaf.jack.queries.WhereConstraint;
import com.rapleaf.jack.queries.ModelQuery;
import com.rapleaf.jack.ModelWithId;
import com.liveramp.kafka_service.db_models.db.iface.IJobStatPersistence;
import com.liveramp.kafka_service.db_models.db.models.JobStat;
import com.liveramp.kafka_service.db_models.db.query.JobStatQueryBuilder;


import com.liveramp.kafka_service.db_models.IDatabases;

public class BaseJobStatPersistenceImpl extends AbstractDatabaseModel<JobStat> implements IJobStatPersistence {
  private final IDatabases databases;

  public BaseJobStatPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "job_stats", Arrays.<String>asList("job_id", "count_error", "count_actual_total", "count_expected_total", "created_at", "updated_at"));
    this.databases = databases;
  }

  @Override
  public JobStat create(Map<Enum, Object> fieldsMap) throws IOException {
    long job_id = (Long) fieldsMap.get(JobStat._Fields.job_id);
    Long count_error_tmp = (Long) fieldsMap.get(JobStat._Fields.count_error);
    Long count_error = count_error_tmp == null ? 0 : count_error_tmp;
    Long count_actual_total_tmp = (Long) fieldsMap.get(JobStat._Fields.count_actual_total);
    Long count_actual_total = count_actual_total_tmp == null ? 0 : count_actual_total_tmp;
    Long count_expected_total_tmp = (Long) fieldsMap.get(JobStat._Fields.count_expected_total);
    Long count_expected_total = count_expected_total_tmp == null ? 0 : count_expected_total_tmp;
    long created_at = (Long) fieldsMap.get(JobStat._Fields.created_at);
    long updated_at = (Long) fieldsMap.get(JobStat._Fields.updated_at);
    return create(job_id, count_error, count_actual_total, count_expected_total, created_at, updated_at);
  }

  public JobStat create(final long job_id, final Long count_error, final Long count_actual_total, final Long count_expected_total, final long updated_at) throws IOException {
    return this.create(job_id, count_error, count_actual_total, count_expected_total, System.currentTimeMillis(), updated_at);
  }
  public JobStat create(final long job_id, final Long count_error, final Long count_actual_total, final Long count_expected_total, final long created_at, final long updated_at) throws IOException {
    long __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
          stmt.setLong(1, job_id);
        if (count_error == null) {
          stmt.setNull(2, java.sql.Types.INTEGER);
        } else {
          stmt.setLong(2, count_error);
        }
        if (count_actual_total == null) {
          stmt.setNull(3, java.sql.Types.INTEGER);
        } else {
          stmt.setLong(3, count_actual_total);
        }
        if (count_expected_total == null) {
          stmt.setNull(4, java.sql.Types.INTEGER);
        } else {
          stmt.setLong(4, count_expected_total);
        }
          stmt.setTimestamp(5, new Timestamp(created_at));
          stmt.setTimestamp(6, new Timestamp(updated_at));
      }
    }, getInsertStatement(Arrays.<String>asList("job_id", "count_error", "count_actual_total", "count_expected_total", "created_at", "updated_at")));
    JobStat newInst = new JobStat(__id, job_id, count_error, count_actual_total, count_expected_total, created_at, updated_at, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public JobStat create(final long job_id, final long created_at, final long updated_at) throws IOException {
    long __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
          stmt.setLong(1, job_id);
          stmt.setTimestamp(2, new Timestamp(created_at));
          stmt.setTimestamp(3, new Timestamp(updated_at));
      }
    }, getInsertStatement(Arrays.<String>asList("job_id", "created_at", "updated_at")));
    JobStat newInst = new JobStat(__id, job_id, null, null, null, created_at, updated_at, databases);
    newInst.setCreated(true);
    cachedById.put(__id, newInst);
    clearForeignKeyCache();
    return newInst;
  }


  public JobStat createDefaultInstance() throws IOException {
    return create(0L, 0L, 0L);
  }

  public Set<JobStat> find(Map<Enum, Object> fieldsMap) throws IOException {
    return find(null, fieldsMap);
  }

  public Set<JobStat> find(Set<Long> ids, Map<Enum, Object> fieldsMap) throws IOException {
    Set<JobStat> foundSet = new HashSet<JobStat>();
    
    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundSet;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM job_stats WHERE (");
    List<Object> nonNullValues = new ArrayList<Object>();
    List<JobStat._Fields> nonNullValueFields = new ArrayList<JobStat._Fields>();

    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      Object value = entry.getValue();
      
      String queryValue = value != null ? " = ? " : " IS NULL";
      if (value != null) {
        nonNullValueFields.add((JobStat._Fields) field);
        nonNullValues.add(value);
      }

      statementString.append(field).append(queryValue);
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    if (ids != null) statementString.append(" AND ").append(getIdSetCondition(ids));
    statementString.append(")");

    int retryCount = 0;
    PreparedStatement preparedStatement;

    while (true) {
      preparedStatement = getPreparedStatement(statementString.toString());

      for (int i = 0; i < nonNullValues.size(); i++) {
        JobStat._Fields field = nonNullValueFields.get(i);
        try {
          switch (field) {
            case job_id:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case count_error:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case count_actual_total:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case count_expected_total:
              preparedStatement.setLong(i+1, (Long) nonNullValues.get(i));
              break;
            case created_at:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
            case updated_at:
              preparedStatement.setTimestamp(i+1, new Timestamp((Long) nonNullValues.get(i)));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }

      try {
        executeQuery(foundSet, preparedStatement);
        return foundSet;
      } catch (SQLRecoverableException e) {
        if (++retryCount > AbstractDatabaseModel.MAX_CONNECTION_RETRIES) {
          throw new IOException(e);
        }
      } catch (SQLException e) {
        throw new IOException(e);
      }
    }
  }

  @Override
  protected void setStatementParameters(PreparedStatement preparedStatement, ModelQuery query) throws IOException {
    int index = 0;
    for (WhereConstraint constraint : query.getWhereConstraints()) {
      JobStat._Fields field = (JobStat._Fields)constraint.getField();
      for (Object parameter : constraint.getParameters()) {
        if (parameter == null) {
          continue;
        }
        try {
          switch (field) {
            case job_id:
              preparedStatement.setLong(++index, (Long) parameter);
              break;
            case count_error:
              preparedStatement.setLong(++index, (Long) parameter);
              break;
            case count_actual_total:
              preparedStatement.setLong(++index, (Long) parameter);
              break;
            case count_expected_total:
              preparedStatement.setLong(++index, (Long) parameter);
              break;
            case created_at:
              preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
              break;
            case updated_at:
              preparedStatement.setTimestamp(++index, new Timestamp((Long) parameter));
              break;
          }
        } catch (SQLException e) {
          throw new IOException(e);
        }
      }
    }
  }

  @Override
  protected void setAttrs(JobStat model, PreparedStatement stmt) throws SQLException {
    {
      stmt.setLong(1, model.getJobId());
    }
    if (model.getCountError() == null) {
      stmt.setNull(2, java.sql.Types.INTEGER);
    } else {
      stmt.setLong(2, model.getCountError());
    }
    if (model.getCountActualTotal() == null) {
      stmt.setNull(3, java.sql.Types.INTEGER);
    } else {
      stmt.setLong(3, model.getCountActualTotal());
    }
    if (model.getCountExpectedTotal() == null) {
      stmt.setNull(4, java.sql.Types.INTEGER);
    } else {
      stmt.setLong(4, model.getCountExpectedTotal());
    }
    {
      stmt.setTimestamp(5, new Timestamp(model.getCreatedAt()));
    }
    {
      stmt.setTimestamp(6, new Timestamp(model.getUpdatedAt()));
    }
    stmt.setLong(7, model.getId());
  }

  @Override
  protected JobStat instanceFromResultSet(ResultSet rs, Set<Enum> selectedFields) throws SQLException {
    boolean allFields = selectedFields == null || selectedFields.isEmpty();
    return new JobStat(rs.getLong("id"),
      allFields || selectedFields.contains(JobStat._Fields.job_id) ? getLongOrNull(rs, "job_id") : 0L,
      allFields || selectedFields.contains(JobStat._Fields.count_error) ? getLongOrNull(rs, "count_error") : null,
      allFields || selectedFields.contains(JobStat._Fields.count_actual_total) ? getLongOrNull(rs, "count_actual_total") : null,
      allFields || selectedFields.contains(JobStat._Fields.count_expected_total) ? getLongOrNull(rs, "count_expected_total") : null,
      allFields || selectedFields.contains(JobStat._Fields.created_at) ? getDateAsLong(rs, "created_at") : 0L,
      allFields || selectedFields.contains(JobStat._Fields.updated_at) ? getDateAsLong(rs, "updated_at") : 0L,
      databases
    );
  }

  public Set<JobStat> findByJobId(final long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.job_id, value);}});
  }

  public Set<JobStat> findByCountError(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.count_error, value);}});
  }

  public Set<JobStat> findByCountActualTotal(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.count_actual_total, value);}});
  }

  public Set<JobStat> findByCountExpectedTotal(final Long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.count_expected_total, value);}});
  }

  public Set<JobStat> findByCreatedAt(final long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.created_at, value);}});
  }

  public Set<JobStat> findByUpdatedAt(final long value) throws IOException {
    return find(new HashMap<Enum, Object>(){{put(JobStat._Fields.updated_at, value);}});
  }

  public JobStatQueryBuilder query() {
    return new JobStatQueryBuilder(this);
  }
}
