
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.liveramp.kafka_service.db_models.db.models;

import java.io.IOException;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.rapleaf.jack.ModelWithId;
import com.rapleaf.jack.AttributesWithId;
import com.rapleaf.jack.BelongsToAssociation;
import com.rapleaf.jack.HasManyAssociation;
import com.rapleaf.jack.HasOneAssociation;
import com.rapleaf.jack.ModelIdWrapper;
import com.rapleaf.jack.queries.AbstractTable;
import com.rapleaf.jack.queries.Column;

import com.liveramp.kafka_service.db_models.IDatabases;

public class JobStat extends ModelWithId<JobStat, IDatabases> implements Comparable<JobStat>{
  
  public static final long serialVersionUID = -299361979266848573L;

  public static class Tbl extends AbstractTable {
    public final Column ID;
    public final Column JOB_ID;
    public final Column IRC_ID;
    public final Column FIELD_ID;
    public final Column COUNT_SUCCESS;
    public final Column COUNT_FAILURE;
    public final Column COUNT_TOTAL;
    public final Column CREATED_AT;
    public final Column UPDATED_AT;

    private Tbl(String alias) {
      super("job_stats", alias);
      this.ID = Column.fromId(alias);
      this.JOB_ID = Column.fromField(alias, _Fields.job_id, Long.class);
      this.IRC_ID = Column.fromField(alias, _Fields.irc_id, Long.class);
      this.FIELD_ID = Column.fromField(alias, _Fields.field_id, Long.class);
      this.COUNT_SUCCESS = Column.fromField(alias, _Fields.count_success, Long.class);
      this.COUNT_FAILURE = Column.fromField(alias, _Fields.count_failure, Long.class);
      this.COUNT_TOTAL = Column.fromField(alias, _Fields.count_total, Long.class);
      this.CREATED_AT = Column.fromField(alias, _Fields.created_at, Long.class);
      this.UPDATED_AT = Column.fromField(alias, _Fields.updated_at, Long.class);
      Collections.addAll(this.allColumns, ID, JOB_ID, IRC_ID, FIELD_ID, COUNT_SUCCESS, COUNT_FAILURE, COUNT_TOTAL, CREATED_AT, UPDATED_AT);
    }

    public static Tbl as(String alias) {
      return new Tbl(alias);
    }
  }

  public static final Tbl TBL = new Tbl("job_stats");
  public static final Column ID = TBL.ID;
  public static final Column JOB_ID = TBL.JOB_ID;
  public static final Column IRC_ID = TBL.IRC_ID;
  public static final Column FIELD_ID = TBL.FIELD_ID;
  public static final Column COUNT_SUCCESS = TBL.COUNT_SUCCESS;
  public static final Column COUNT_FAILURE = TBL.COUNT_FAILURE;
  public static final Column COUNT_TOTAL = TBL.COUNT_TOTAL;
  public static final Column CREATED_AT = TBL.CREATED_AT;
  public static final Column UPDATED_AT = TBL.UPDATED_AT;

  private final Attributes attributes;

  private transient JobStat.Id cachedTypedId;

  // Associations

  public enum _Fields {
    job_id,
    irc_id,
    field_id,
    count_success,
    count_failure,
    count_total,
    created_at,
    updated_at,
  }

  @Override
  public JobStat.Id getTypedId() {
    if (cachedTypedId == null) {
      cachedTypedId = new JobStat.Id(this.getId());
    }
    return cachedTypedId;
  }

  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long created_at, final long updated_at, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, job_id, irc_id, field_id, count_success, count_failure, count_total, created_at, updated_at);
  }

  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long created_at, final long updated_at) {
    super(null);
    attributes = new Attributes(id, job_id, irc_id, field_id, count_success, count_failure, count_total, created_at, updated_at);
  }
  
  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long updated_at, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, job_id, irc_id, field_id, count_success, count_failure, count_total, updated_at);
  }

  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long updated_at) {
    super(null);
    attributes = new Attributes(id, job_id, irc_id, field_id, count_success, count_failure, count_total, updated_at);
  }
  
  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final long created_at, final long updated_at, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, job_id, irc_id, field_id, created_at, updated_at);
  }

  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final long created_at, final long updated_at) {
    super(null);
    attributes = new Attributes(id, job_id, irc_id, field_id, created_at, updated_at);
  }
   
  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final long updated_at, IDatabases databases) {
    super(databases);
    attributes = new Attributes(id, job_id, irc_id, field_id, updated_at);
  }

  public JobStat(long id, final long job_id, final long irc_id, final long field_id, final long updated_at) {
    super(null);
    attributes = new Attributes(id, job_id, irc_id, field_id, updated_at);
  }

  public static JobStat newDefaultInstance(long id) {
    return new JobStat(id, 0L, 0L, 0L, 0L, 0L);
  }

  public JobStat(Attributes attributes, IDatabases databases) {
    super(databases);
    this.attributes = attributes;
  }

  public JobStat(Attributes attributes) {
    super(null);
    this.attributes = attributes;
  }

  public JobStat(long id, Map<Enum, Object> fieldsMap) {
    super(null);
    attributes = new Attributes(id, fieldsMap);
  }

  public JobStat (JobStat other) {
    this(other, (IDatabases)null);
  }

  public JobStat (JobStat other, IDatabases databases) {
    super(databases);
    attributes = new Attributes(other.getAttributes());

    if (databases != null) {
    }
  }
  
  public Attributes getAttributes() {
    return attributes;
  }

  public long getJobId(){
    return attributes.getJobId();
  }

  public JobStat setJobId(long newval){
    attributes.setJobId(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getIrcId(){
    return attributes.getIrcId();
  }

  public JobStat setIrcId(long newval){
    attributes.setIrcId(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getFieldId(){
    return attributes.getFieldId();
  }

  public JobStat setFieldId(long newval){
    attributes.setFieldId(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getCountSuccess(){
    return attributes.getCountSuccess();
  }

  public JobStat setCountSuccess(Long newval){
    attributes.setCountSuccess(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getCountFailure(){
    return attributes.getCountFailure();
  }

  public JobStat setCountFailure(Long newval){
    attributes.setCountFailure(newval);
    cachedHashCode = 0;
    return this;
  }

  public Long getCountTotal(){
    return attributes.getCountTotal();
  }

  public JobStat setCountTotal(Long newval){
    attributes.setCountTotal(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getCreatedAt(){
    return attributes.getCreatedAt();
  }

  public JobStat setCreatedAt(long newval){
    attributes.setCreatedAt(newval);
    cachedHashCode = 0;
    return this;
  }

  public long getUpdatedAt(){
    return attributes.getUpdatedAt();
  }

  public JobStat setUpdatedAt(long newval){
    attributes.setUpdatedAt(newval);
    cachedHashCode = 0;
    return this;
  }

  public void setField(_Fields field, Object value) {
    switch (field) {
      case job_id:
        setJobId((Long) value);
        break;
      case irc_id:
        setIrcId((Long) value);
        break;
      case field_id:
        setFieldId((Long) value);
        break;
      case count_success:
        setCountSuccess((Long) value);
        break;
      case count_failure:
        setCountFailure((Long) value);
        break;
      case count_total:
        setCountTotal((Long) value);
        break;
      case created_at:
        setCreatedAt((Long) value);
        break;
      case updated_at:
        setUpdatedAt((Long) value);
        break;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }
  }
  
  public void setField(String fieldName, Object value) {
    if (fieldName.equals("job_id")) {
      setJobId((Long)  value);
      return;
    }
    if (fieldName.equals("irc_id")) {
      setIrcId((Long)  value);
      return;
    }
    if (fieldName.equals("field_id")) {
      setFieldId((Long)  value);
      return;
    }
    if (fieldName.equals("count_success")) {
      setCountSuccess((Long)  value);
      return;
    }
    if (fieldName.equals("count_failure")) {
      setCountFailure((Long)  value);
      return;
    }
    if (fieldName.equals("count_total")) {
      setCountTotal((Long)  value);
      return;
    }
    if (fieldName.equals("created_at")) {
      setCreatedAt((Long)  value);
      return;
    }
    if (fieldName.equals("updated_at")) {
      setUpdatedAt((Long)  value);
      return;
    }
    throw new IllegalStateException("Invalid field: " + fieldName);
  }

  public static Class getFieldType(_Fields field) {
    switch (field) {
      case job_id:
        return long.class;
      case irc_id:
        return long.class;
      case field_id:
        return long.class;
      case count_success:
        return Long.class;
      case count_failure:
        return Long.class;
      case count_total:
        return Long.class;
      case created_at:
        return long.class;
      case updated_at:
        return long.class;
      default:
        throw new IllegalStateException("Invalid field: " + field);
    }    
  }

  public static Class getFieldType(String fieldName) {    
    if (fieldName.equals("job_id")) {
      return long.class;
    }
    if (fieldName.equals("irc_id")) {
      return long.class;
    }
    if (fieldName.equals("field_id")) {
      return long.class;
    }
    if (fieldName.equals("count_success")) {
      return Long.class;
    }
    if (fieldName.equals("count_failure")) {
      return Long.class;
    }
    if (fieldName.equals("count_total")) {
      return Long.class;
    }
    if (fieldName.equals("created_at")) {
      return long.class;
    }
    if (fieldName.equals("updated_at")) {
      return long.class;
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  @Override
  public Object getField(String fieldName) {
    if (fieldName.equals("id")) {
      return getId();
    }
    if (fieldName.equals("job_id")) {
      return getJobId();
    }
    if (fieldName.equals("irc_id")) {
      return getIrcId();
    }
    if (fieldName.equals("field_id")) {
      return getFieldId();
    }
    if (fieldName.equals("count_success")) {
      return getCountSuccess();
    }
    if (fieldName.equals("count_failure")) {
      return getCountFailure();
    }
    if (fieldName.equals("count_total")) {
      return getCountTotal();
    }
    if (fieldName.equals("created_at")) {
      return getCreatedAt();
    }
    if (fieldName.equals("updated_at")) {
      return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public Object getField(_Fields field) {
    switch (field) {
      case job_id:
        return getJobId();
      case irc_id:
        return getIrcId();
      case field_id:
        return getFieldId();
      case count_success:
        return getCountSuccess();
      case count_failure:
        return getCountFailure();
      case count_total:
        return getCountTotal();
      case created_at:
        return getCreatedAt();
      case updated_at:
        return getUpdatedAt();
    }
    throw new IllegalStateException("Invalid field: " + field);
  }
  
  public boolean hasField(String fieldName) {
    if (fieldName.equals("id")) {
      return true;
    }
    if (fieldName.equals("job_id")) {
      return true;
    }
    if (fieldName.equals("irc_id")) {
      return true;
    }
    if (fieldName.equals("field_id")) {
      return true;
    }
    if (fieldName.equals("count_success")) {
      return true;
    }
    if (fieldName.equals("count_failure")) {
      return true;
    }
    if (fieldName.equals("count_total")) {
      return true;
    }
    if (fieldName.equals("created_at")) {
      return true;
    }
    if (fieldName.equals("updated_at")) {
      return true;
    }
    return false;
  }

  public static Object getDefaultValue(_Fields field) {
    switch (field) {
      case job_id:
        return null;
      case irc_id:
        return null;
      case field_id:
        return null;
      case count_success:
        return 0;
      case count_failure:
        return 0;
      case count_total:
        return 0;
      case created_at:
        return null;
      case updated_at:
        return null;
    }
    throw new IllegalStateException("Invalid field: " + field);
  }

  @Override
  public Set<Enum> getFieldSet() {
    Set set = EnumSet.allOf(_Fields.class);
    return set;
  }

  @Override
  public JobStat getCopy() {
    return getCopy(databases);
  }

  @Override
  public JobStat getCopy(IDatabases databases) {
    return new JobStat(this, databases);
  }

  @Override
  public boolean save() throws IOException {
    return databases.getKafkaService().jobStats().save(this);
  }

  public String toString() {
    return "<JobStat"
      + " job_id: " + getJobId()
      + " irc_id: " + getIrcId()
      + " field_id: " + getFieldId()
      + " count_success: " + getCountSuccess()
      + " count_failure: " + getCountFailure()
      + " count_total: " + getCountTotal()
      + " created_at: " + getCreatedAt()
      + " updated_at: " + getUpdatedAt()
      + ">";
  }

  public void unsetAssociations() {
    unsetDatabaseReference();
  }

  public int compareTo(JobStat that){
    return Long.valueOf(this.getId()).compareTo(that.getId());
  }
  
  
  public static class Attributes extends AttributesWithId {
    
    public static final long serialVersionUID = -299361979266848573L;

    // Fields
    private long __job_id;
    private long __irc_id;
    private long __field_id;
    private Long __count_success;
    private Long __count_failure;
    private Long __count_total;
    private long __created_at;
    private long __updated_at;

    public Attributes(long id) {
      super(id);
    }

    public Attributes(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long created_at, final long updated_at) {
      super(id);
      this.__job_id = job_id;
      this.__irc_id = irc_id;
      this.__field_id = field_id;
      this.__count_success = count_success;
      this.__count_failure = count_failure;
      this.__count_total = count_total;
      this.__created_at = created_at;
      this.__updated_at = updated_at;
    }
    
    public Attributes(long id, final long job_id, final long irc_id, final long field_id, final Long count_success, final Long count_failure, final Long count_total, final long updated_at) {
      super(id);
      this.__job_id = job_id;
      this.__irc_id = irc_id;
      this.__field_id = field_id;
      this.__count_success = count_success;
      this.__count_failure = count_failure;
      this.__count_total = count_total;
      this.__updated_at = updated_at;
      this.__created_at = System.currentTimeMillis();
    }
    
    public Attributes(long id, final long job_id, final long irc_id, final long field_id, final long created_at, final long updated_at) {
      super(id);
      this.__job_id = job_id;
      this.__irc_id = irc_id;
      this.__field_id = field_id;
      this.__created_at = created_at;
      this.__updated_at = updated_at;
    }
    
    public Attributes(long id, final long job_id, final long irc_id, final long field_id, final long updated_at) {
      super(id);
      this.__job_id = job_id;
      this.__irc_id = irc_id;
      this.__field_id = field_id;
      this.__updated_at = updated_at;
      this.__created_at = System.currentTimeMillis();
    }

    public static Attributes newDefaultInstance(long id) {
      return new Attributes(id, 0L, 0L, 0L, 0L, 0L);
    }

    public Attributes(long id, Map<Enum, Object> fieldsMap) {
      super(id);
      long job_id = (Long) fieldsMap.get(JobStat._Fields.job_id);
      long irc_id = (Long) fieldsMap.get(JobStat._Fields.irc_id);
      long field_id = (Long) fieldsMap.get(JobStat._Fields.field_id);
      Long count_success_tmp = (Long) fieldsMap.get(JobStat._Fields.count_success);
      Long count_success = count_success_tmp == null ? 0 : count_success_tmp;
      Long count_failure_tmp = (Long) fieldsMap.get(JobStat._Fields.count_failure);
      Long count_failure = count_failure_tmp == null ? 0 : count_failure_tmp;
      Long count_total_tmp = (Long) fieldsMap.get(JobStat._Fields.count_total);
      Long count_total = count_total_tmp == null ? 0 : count_total_tmp;
      long created_at = (Long) fieldsMap.get(JobStat._Fields.created_at);
      long updated_at = (Long) fieldsMap.get(JobStat._Fields.updated_at);
      this.__job_id = job_id;
      this.__irc_id = irc_id;
      this.__field_id = field_id;
      this.__count_success = count_success;
      this.__count_failure = count_failure;
      this.__count_total = count_total;
      this.__created_at = created_at;
      this.__updated_at = updated_at;
    }

    public Attributes(Attributes other) {
      super(other.getId());
      this.__job_id = other.getJobId();
      this.__irc_id = other.getIrcId();
      this.__field_id = other.getFieldId();
      this.__count_success = other.getCountSuccess();
      this.__count_failure = other.getCountFailure();
      this.__count_total = other.getCountTotal();
      this.__created_at = other.getCreatedAt();
      this.__updated_at = other.getUpdatedAt();
    }

    public long getJobId(){
      return __job_id;
    }

    public Attributes setJobId(long newval){
      this.__job_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getIrcId(){
      return __irc_id;
    }

    public Attributes setIrcId(long newval){
      this.__irc_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getFieldId(){
      return __field_id;
    }

    public Attributes setFieldId(long newval){
      this.__field_id = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getCountSuccess(){
      return __count_success;
    }

    public Attributes setCountSuccess(Long newval){
      this.__count_success = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getCountFailure(){
      return __count_failure;
    }

    public Attributes setCountFailure(Long newval){
      this.__count_failure = newval;
      cachedHashCode = 0;
      return this;
    }

    public Long getCountTotal(){
      return __count_total;
    }

    public Attributes setCountTotal(Long newval){
      this.__count_total = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getCreatedAt(){
      return __created_at;
    }

    public Attributes setCreatedAt(long newval){
      this.__created_at = newval;
      cachedHashCode = 0;
      return this;
    }

    public long getUpdatedAt(){
      return __updated_at;
    }

    public Attributes setUpdatedAt(long newval){
      this.__updated_at = newval;
      cachedHashCode = 0;
      return this;
    }

    public void setField(_Fields field, Object value) {
      switch (field) {
        case job_id:
          setJobId((Long) value);
          break;
        case irc_id:
          setIrcId((Long) value);
          break;
        case field_id:
          setFieldId((Long) value);
          break;
        case count_success:
          setCountSuccess((Long) value);
          break;
        case count_failure:
          setCountFailure((Long) value);
          break;
        case count_total:
          setCountTotal((Long) value);
          break;
        case created_at:
          setCreatedAt((Long) value);
          break;
        case updated_at:
          setUpdatedAt((Long) value);
          break;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }
    }

    public void setField(String fieldName, Object value) {
      if (fieldName.equals("job_id")) {
        setJobId((Long)  value);
        return;
      }
      if (fieldName.equals("irc_id")) {
        setIrcId((Long)  value);
        return;
      }
      if (fieldName.equals("field_id")) {
        setFieldId((Long)  value);
        return;
      }
      if (fieldName.equals("count_success")) {
        setCountSuccess((Long)  value);
        return;
      }
      if (fieldName.equals("count_failure")) {
        setCountFailure((Long)  value);
        return;
      }
      if (fieldName.equals("count_total")) {
        setCountTotal((Long)  value);
        return;
      }
      if (fieldName.equals("created_at")) {
        setCreatedAt((Long)  value);
        return;
      }
      if (fieldName.equals("updated_at")) {
        setUpdatedAt((Long)  value);
        return;
      }
      throw new IllegalStateException("Invalid field: " + fieldName);
    }

    public static Class getFieldType(_Fields field) {
      switch (field) {
        case job_id:
          return long.class;
        case irc_id:
          return long.class;
        case field_id:
          return long.class;
        case count_success:
          return Long.class;
        case count_failure:
          return Long.class;
        case count_total:
          return Long.class;
        case created_at:
          return long.class;
        case updated_at:
          return long.class;
        default:
          throw new IllegalStateException("Invalid field: " + field);
      }    
    }

    public static Class getFieldType(String fieldName) {    
      if (fieldName.equals("job_id")) {
        return long.class;
      }
      if (fieldName.equals("irc_id")) {
        return long.class;
      }
      if (fieldName.equals("field_id")) {
        return long.class;
      }
      if (fieldName.equals("count_success")) {
        return Long.class;
      }
      if (fieldName.equals("count_failure")) {
        return Long.class;
      }
      if (fieldName.equals("count_total")) {
        return Long.class;
      }
      if (fieldName.equals("created_at")) {
        return long.class;
      }
      if (fieldName.equals("updated_at")) {
        return long.class;
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    @Override
    public Object getField(String fieldName) {
      if (fieldName.equals("id")) {
        return getId();
      }
      if (fieldName.equals("job_id")) {
        return getJobId();
      }
      if (fieldName.equals("irc_id")) {
        return getIrcId();
      }
      if (fieldName.equals("field_id")) {
        return getFieldId();
      }
      if (fieldName.equals("count_success")) {
        return getCountSuccess();
      }
      if (fieldName.equals("count_failure")) {
        return getCountFailure();
      }
      if (fieldName.equals("count_total")) {
        return getCountTotal();
      }
      if (fieldName.equals("created_at")) {
        return getCreatedAt();
      }
      if (fieldName.equals("updated_at")) {
        return getUpdatedAt();
      }
      throw new IllegalStateException("Invalid field name: " + fieldName);
    }

    public Object getField(_Fields field) {
      switch (field) {
        case job_id:
          return getJobId();
        case irc_id:
          return getIrcId();
        case field_id:
          return getFieldId();
        case count_success:
          return getCountSuccess();
        case count_failure:
          return getCountFailure();
        case count_total:
          return getCountTotal();
        case created_at:
          return getCreatedAt();
        case updated_at:
          return getUpdatedAt();
      }
      throw new IllegalStateException("Invalid field: " + field);
    }

    public boolean hasField(String fieldName) {
      if (fieldName.equals("id")) {
        return true;
      }
      if (fieldName.equals("job_id")) {
        return true;
      }
      if (fieldName.equals("irc_id")) {
        return true;
      }
      if (fieldName.equals("field_id")) {
        return true;
      }
      if (fieldName.equals("count_success")) {
        return true;
      }
      if (fieldName.equals("count_failure")) {
        return true;
      }
      if (fieldName.equals("count_total")) {
        return true;
      }
      if (fieldName.equals("created_at")) {
        return true;
      }
      if (fieldName.equals("updated_at")) {
        return true;
      }
      return false;
    }

    public static Object getDefaultValue(_Fields field) {
      switch (field) {
        case job_id:
          return null;
        case irc_id:
          return null;
        case field_id:
          return null;
        case count_success:
          return 0;
        case count_failure:
          return 0;
        case count_total:
          return 0;
        case created_at:
          return null;
        case updated_at:
          return null;
      }
      throw new IllegalStateException("Invalid field: " + field);
    }
    
    @Override
    public Set<Enum> getFieldSet() {
      Set set = EnumSet.allOf(_Fields.class);
      return set;
    }
    
    public String toString() {
      return "<JobStat.Attributes"
        + " job_id: " + getJobId()
        + " irc_id: " + getIrcId()
        + " field_id: " + getFieldId()
        + " count_success: " + getCountSuccess()
        + " count_failure: " + getCountFailure()
        + " count_total: " + getCountTotal()
        + " created_at: " + getCreatedAt()
        + " updated_at: " + getUpdatedAt()
        + ">";
    }
  }

  public static class Id implements ModelIdWrapper<JobStat.Id> {
    public static final long serialVersionUID = 1L;

    private final long id;

    public Id(Long id) {
      this.id = id;
    }

    @Override
    public Long getId() {
      return Long.valueOf(this.id);
    }

    @Override
    public int compareTo(Id other) {
      return this.getId().compareTo(other.getId());
    }

    @Override
    public boolean equals(Object other) {
      if (other instanceof Id) {
        return this.getId().equals(((Id) other).getId());
      }
      return false;
    }

    @Override
    public int hashCode() {
      return this.getId().hashCode();
    }

    @Override
    public String toString() {
      return "<JobStat.Id: "+this.getId()+">";
    }
  }

  public static Set<Attributes> convertToAttributesSet(Set<JobStat> models) {
    Set<Attributes> attributes = new HashSet<Attributes>();
    for (JobStat model : models) {
      attributes.add(model.getAttributes());
    }
    return attributes;
  }

}
